
server.port = 8081

spring.datasource.url=jdbc:mysql://localhost:3306/booking-ms
spring.datasource.username=root
spring.datasource.password=pass@123
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database-platform = org.hibernate.dialect.MySQLDialect
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto = create-drop
#spring.jpa.hibernate.use-new-id-generator-mappings= false
spring.jpa.show-sql=true

spring.application.name = booking-service

eureka.client.serviceUrl.defaultZone = http://localhost:8761/eureka

#Enable Circuit Breaker Pattern
spring.cloud.openfeign.circuitbreaker.enabled = true

#Kafka Producer Configuration
com.bus.reservation.mq.topic-name=book-seat
spring.kafka.producer.bootstrap-servers= localhost:9092
spring.kafka.producer.group-id=process-payment
spring.kafka.producer.auto-offset-reset= earliest
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#JSON Serializer
spring.kafka.producer.value-serializer= org.springframework.kafka.support.serializer.JsonSerializer
#TYPE MAPPING
spring.kafka.producer.properties.spring.json.type.mapping=dto:com.busreservation.bookingservice.model.dto.BookingMessageDto
spring.kafka.producer.properties.spring.json.trusted.packages=*


#Kafka Consumer Configuration
com.bus.reservation.mq.inventory.topic-name=inventory-update
spring.kafka.consumer.bootstrap-servers= localhost:9092
spring.kafka.consumer.group-id=process-payment
spring.kafka.consumer.auto-offset-reset= earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#JSON Deserializer
spring.kafka.consumer.value-deserializer= org.springframework.kafka.support.serializer.JsonDeserializer
#TYPE MAPPING
spring.kafka.consumer.properties.spring.json.type.mapping=inventoryMsg:com.busreservation.bookingservice.model.dto.InventoryMessageVO
spring.kafka.consumer.properties.spring.json.trusted.packages=*
